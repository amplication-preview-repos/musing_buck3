/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Camper } from "./Camper";
import { CamperCountArgs } from "./CamperCountArgs";
import { CamperFindManyArgs } from "./CamperFindManyArgs";
import { CamperFindUniqueArgs } from "./CamperFindUniqueArgs";
import { CreateCamperArgs } from "./CreateCamperArgs";
import { UpdateCamperArgs } from "./UpdateCamperArgs";
import { DeleteCamperArgs } from "./DeleteCamperArgs";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { CamperService } from "../camper.service";
@graphql.Resolver(() => Camper)
export class CamperResolverBase {
  constructor(protected readonly service: CamperService) {}

  async _campersMeta(
    @graphql.Args() args: CamperCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Camper])
  async campers(@graphql.Args() args: CamperFindManyArgs): Promise<Camper[]> {
    return this.service.campers(args);
  }

  @graphql.Query(() => Camper, { nullable: true })
  async camper(
    @graphql.Args() args: CamperFindUniqueArgs
  ): Promise<Camper | null> {
    const result = await this.service.camper(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Camper)
  async createCamper(@graphql.Args() args: CreateCamperArgs): Promise<Camper> {
    return await this.service.createCamper({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Camper)
  async updateCamper(
    @graphql.Args() args: UpdateCamperArgs
  ): Promise<Camper | null> {
    try {
      return await this.service.updateCamper({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Camper)
  async deleteCamper(
    @graphql.Args() args: DeleteCamperArgs
  ): Promise<Camper | null> {
    try {
      return await this.service.deleteCamper(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Booking], { name: "bookings" })
  async findBookings(
    @graphql.Parent() parent: Camper,
    @graphql.Args() args: BookingFindManyArgs
  ): Promise<Booking[]> {
    const results = await this.service.findBookings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
