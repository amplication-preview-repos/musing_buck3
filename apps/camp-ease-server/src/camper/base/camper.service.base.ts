/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Camper as PrismaCamper,
  Booking as PrismaBooking,
} from "@prisma/client";

export class CamperServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CamperCountArgs, "select">): Promise<number> {
    return this.prisma.camper.count(args);
  }

  async campers(args: Prisma.CamperFindManyArgs): Promise<PrismaCamper[]> {
    return this.prisma.camper.findMany(args);
  }
  async camper(
    args: Prisma.CamperFindUniqueArgs
  ): Promise<PrismaCamper | null> {
    return this.prisma.camper.findUnique(args);
  }
  async createCamper(args: Prisma.CamperCreateArgs): Promise<PrismaCamper> {
    return this.prisma.camper.create(args);
  }
  async updateCamper(args: Prisma.CamperUpdateArgs): Promise<PrismaCamper> {
    return this.prisma.camper.update(args);
  }
  async deleteCamper(args: Prisma.CamperDeleteArgs): Promise<PrismaCamper> {
    return this.prisma.camper.delete(args);
  }

  async findBookings(
    parentId: string,
    args: Prisma.BookingFindManyArgs
  ): Promise<PrismaBooking[]> {
    return this.prisma.camper
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookings(args);
  }
}
