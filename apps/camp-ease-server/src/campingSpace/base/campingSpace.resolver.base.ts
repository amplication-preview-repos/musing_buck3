/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CampingSpace } from "./CampingSpace";
import { CampingSpaceCountArgs } from "./CampingSpaceCountArgs";
import { CampingSpaceFindManyArgs } from "./CampingSpaceFindManyArgs";
import { CampingSpaceFindUniqueArgs } from "./CampingSpaceFindUniqueArgs";
import { CreateCampingSpaceArgs } from "./CreateCampingSpaceArgs";
import { UpdateCampingSpaceArgs } from "./UpdateCampingSpaceArgs";
import { DeleteCampingSpaceArgs } from "./DeleteCampingSpaceArgs";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { CampingSpaceService } from "../campingSpace.service";
@graphql.Resolver(() => CampingSpace)
export class CampingSpaceResolverBase {
  constructor(protected readonly service: CampingSpaceService) {}

  async _campingSpacesMeta(
    @graphql.Args() args: CampingSpaceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CampingSpace])
  async campingSpaces(
    @graphql.Args() args: CampingSpaceFindManyArgs
  ): Promise<CampingSpace[]> {
    return this.service.campingSpaces(args);
  }

  @graphql.Query(() => CampingSpace, { nullable: true })
  async campingSpace(
    @graphql.Args() args: CampingSpaceFindUniqueArgs
  ): Promise<CampingSpace | null> {
    const result = await this.service.campingSpace(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CampingSpace)
  async createCampingSpace(
    @graphql.Args() args: CreateCampingSpaceArgs
  ): Promise<CampingSpace> {
    return await this.service.createCampingSpace({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CampingSpace)
  async updateCampingSpace(
    @graphql.Args() args: UpdateCampingSpaceArgs
  ): Promise<CampingSpace | null> {
    try {
      return await this.service.updateCampingSpace({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CampingSpace)
  async deleteCampingSpace(
    @graphql.Args() args: DeleteCampingSpaceArgs
  ): Promise<CampingSpace | null> {
    try {
      return await this.service.deleteCampingSpace(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Booking], { name: "bookings" })
  async findBookings(
    @graphql.Parent() parent: CampingSpace,
    @graphql.Args() args: BookingFindManyArgs
  ): Promise<Booking[]> {
    const results = await this.service.findBookings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
