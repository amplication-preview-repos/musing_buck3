/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CampingSpace as PrismaCampingSpace,
  Booking as PrismaBooking,
} from "@prisma/client";

export class CampingSpaceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CampingSpaceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.campingSpace.count(args);
  }

  async campingSpaces(
    args: Prisma.CampingSpaceFindManyArgs
  ): Promise<PrismaCampingSpace[]> {
    return this.prisma.campingSpace.findMany(args);
  }
  async campingSpace(
    args: Prisma.CampingSpaceFindUniqueArgs
  ): Promise<PrismaCampingSpace | null> {
    return this.prisma.campingSpace.findUnique(args);
  }
  async createCampingSpace(
    args: Prisma.CampingSpaceCreateArgs
  ): Promise<PrismaCampingSpace> {
    return this.prisma.campingSpace.create(args);
  }
  async updateCampingSpace(
    args: Prisma.CampingSpaceUpdateArgs
  ): Promise<PrismaCampingSpace> {
    return this.prisma.campingSpace.update(args);
  }
  async deleteCampingSpace(
    args: Prisma.CampingSpaceDeleteArgs
  ): Promise<PrismaCampingSpace> {
    return this.prisma.campingSpace.delete(args);
  }

  async findBookings(
    parentId: string,
    args: Prisma.BookingFindManyArgs
  ): Promise<PrismaBooking[]> {
    return this.prisma.campingSpace
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookings(args);
  }
}
